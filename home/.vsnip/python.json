{
    "main check": {
        "prefix": "main",
        "body": [
            "if __name__ == \"__main__\":",
            "    ${1:main()}"
        ],
        "description": "Python entry point"
    },
    "function": {
        "prefix": "def",
        "body": [
            "def ${1:function_name}(${2:args}):",
            "    ${3:pass}"
        ],
        "description": "Function definition"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName}:",
            "    def __init__(self, ${2:args}):",
            "        ${3:pass}"
        ],
        "description": "Class definition with __init__"
    },
    "for loop": {
        "prefix": "for",
        "body": [
            "for ${1:var} in ${2:iterable}:",
            "    ${3:pass}"
        ],
        "description": "For loop"
    },
    "while loop": {
        "prefix": "while",
        "body": [
            "while ${1:condition}:",
            "    ${2:pass}"
        ],
        "description": "While loop"
    },
    "if statement": {
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "    ${2:pass}"
        ],
        "description": "If statement"
    },
    "if-else statement": {
        "prefix": "ifelse",
        "body": [
            "if ${1:condition}:",
            "    ${2:pass}",
            "else:",
            "    ${3:pass}"
        ],
        "description": "If-Else statement"
    },
    "try except block": {
        "prefix": "try",
        "body": [
            "try:",
            "    ${1:pass}",
            "except ${2:Exception} as ${3:e}:",
            "    ${4:print(e)}"
        ],
        "description": "Try-Except block"
    },
    "with open file": {
        "prefix": "withopen",
        "body": [
            "with open('${1:filename}', '${2:r}') as ${3:f}:",
            "    ${4:data} = $3.read()"
        ],
        "description": "File open with context manager"
    },
    "list comprehension": {
        "prefix": "listcomp",
        "body": [
            "[${1:expression} for ${2:item} in ${3:iterable}]"
        ],
        "description": "List comprehension"
    },
    "dict comprehension": {
        "prefix": "dictcomp",
        "body": [
            "{${1:key}: ${2:value} for ${3:k}, ${4:v} in ${5:dict_obj}.items()}"
        ],
        "description": "Dictionary comprehension"
    },
    "decorator": {
        "prefix": "decorator",
        "body": [
            "def ${1:decorator_name}(func):",
            "    def wrapper(*args, **kwargs):",
            "        ${2:# before}",
            "        result = func(*args, **kwargs)",
            "        ${3:# after}",
            "        return result",
            "    return wrapper"
        ],
        "description": "Function decorator"
    },
    "logging basic config": {
        "prefix": "log",
        "body": [
            "import logging",
            "logging.basicConfig(level=logging.${1:INFO}, format='%(asctime)s - %(levelname)s - %(message)s')"
        ],
        "description": "Logging setup"
    },
    "unittest template": {
        "prefix": "unittest",
        "body": [
            "import unittest",
            "",
            "class ${1:TestSomething}(unittest.TestCase):",
            "    def test_${2:feature}(self):",
            "        ${3:self.assertEqual(1, 1)}",
            "",
            "if __name__ == '__main__':",
            "    unittest.main()"
        ],
        "description": "Python unit test class"
    }
}
