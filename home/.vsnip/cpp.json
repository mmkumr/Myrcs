{
    "main function": {
        "prefix": "main",
        "body": [
            "#include <iostream>",
            "using namespace std;",
            "",
            "int main() {",
            "  ${1:// your code here}",
            "  return 0;",
            "}"
        ],
        "description": "Main function"
    },
    "class definition": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName} {",
            " public:",
            "  ${1:ClassName}();",
            "  ~$1();",
            "",
            " private:",
            "  ${2:// member variables}",
            "};"
        ],
        "description": "C++ class definition"
    },
    "for loop": {
        "prefix": "for",
        "body": [
            "for (int ${1:i} = 0; $1 < ${2:N}; ++$1) {",
            "  ${3:// your code here}",
            "}"
        ],
        "description": "For loop"
    },
    "while loop": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "  ${2:// your code here}",
            "}"
        ],
        "description": "While loop"
    },
    "if statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "  ${2:// your code here}",
            "}"
        ],
        "description": "If statement"
    },
    "if-else statement": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "  ${2:// your code here}",
            "} else {",
            "  ${3:// else code}",
            "}"
        ],
        "description": "If-Else statement"
    },
    "function definition": {
        "prefix": "func",
        "body": [
            "${1:void} ${2:FunctionName}(${3:int arg}) {",
            "  ${4:// your code here}",
            "}"
        ],
        "description": "Function definition"
    },
    "template function": {
        "prefix": "template",
        "body": [
            "template <typename ${1:T}>",
            "${2:void} ${3:FunctionName}(${1} ${4:arg}) {",
            "  ${5:// function body}",
            "}"
        ],
        "description": "Template function"
    },
    "cout": {
        "prefix": "cout",
        "body": [
            "std::cout << ${1:\"text\"} << std::endl;"
        ],
        "description": "Print to console"
    },
    "cin": {
        "prefix": "cin",
        "body": [
            "std::cin >> ${1:variable};"
        ],
        "description": "Input from console"
    },
    "try catch block": {
        "prefix": "trycatch",
        "body": [
            "try {",
            "  ${1:// code that may throw}",
            "} catch (${2:const std::exception& e}) {",
            "  std::cerr << \"Exception: \" << e.what() << std::endl;",
            "}"
        ],
        "description": "Try-Catch block for exception handling"
    },
    "try multiple catch": {
        "prefix": "trymulti",
        "body": [
            "try {",
            "  ${1:// code that may throw}",
            "} catch (${2:const std::runtime_error& e}) {",
            "  std::cerr << \"Runtime error: \" << e.what() << std::endl;",
            "} catch (${3:const std::exception& e}) {",
            "  std::cerr << \"Other exception: \" << e.what() << std::endl;",
            "} catch (...) {",
            "  std::cerr << \"Unknown exception caught\" << std::endl;",
            "}"
        ],
        "description": "Try block with multiple catch clauses"
    },
    "foreach STL container": {
        "prefix": "foreach",
        "body": [
            "for (auto& ${1:item} : ${2:container}) {",
            "  ${3:// use item}",
            "}"
        ],
        "description": "Range-based for loop over STL container"
    },
    "unique_ptr": {
        "prefix": "unique",
        "body": [
            "#include <memory>",
            "std::unique_ptr<${1:Type}> ${2:ptr} = std::make_unique<$1>(${3:args});"
        ],
        "description": "Declare a std::unique_ptr"
    },
    "shared_ptr": {
        "prefix": "shared",
        "body": [
            "#include <memory>",
            "std::shared_ptr<${1:Type}> ${2:ptr} = std::make_shared<$1>(${3:args});"
        ],
        "description": "Declare a std::shared_ptr"
    },
    "lambda function": {
        "prefix": "lambda",
        "body": [
            "auto ${1:func} = [${2:&}](${3:args}) -> ${4:void} {",
            "  ${5:// body}",
            "};"
        ],
        "description": "Lambda function syntax"
    },
    "vector basic": {
        "prefix": "vector",
        "body": [
            "#include <vector>",
            "",
            "std::vector<${1:int}> ${2:vec} = { ${3:1, 2, 3} };",
            "",
            "for (auto ${4:val} : $2) {",
            "  std::cout << $4 << std::endl;",
            "}"
        ],
        "description": "Declare and iterate over a std::vector"
    },
    "vector push_back": {
        "prefix": "vectorpush",
        "body": [
            "${1:vec}.push_back(${2:value});"
        ],
        "description": "Push element to vector"
    },
    "vector index access": {
        "prefix": "vectoridx",
        "body": [
            "${1:vec}[${2:i}]"
        ],
        "description": "Access vector element by index"
    },
    "vector size": {
        "prefix": "vectorsize",
        "body": [
            "${1:vec}.size()"
        ],
        "description": "Get size of vector"
    },
    "vector declare empty": {
        "prefix": "vectornew",
        "body": [
            "std::vector<${1:type}> ${2:vec};"
        ],
        "description": "Declare empty vector"
    },
    "file include": {
        "prefix": "fileinc",
        "body": [
            "#include <fstream>",
            "#include <string>"
        ],
        "description": "Include file stream and string"
    },
    "file write": {
        "prefix": "filewrite",
        "body": [
            "std::ofstream ${1:ofs}(${2:\"output.txt\"});",
            "if ($1.is_open()) {",
            "  $1 << ${3:\"Hello, file!\"} << std::endl;",
            "  $1.close();",
            "} else {",
            "  std::cerr << \"Unable to open file\" << std::endl;",
            "}"
        ],
        "description": "Write text to a file"
    },
    "file read": {
        "prefix": "fileread",
        "body": [
            "std::ifstream ${1:ifs}(${2:\"input.txt\"});",
            "std::string ${3:line};",
            "if ($1.is_open()) {",
            "  while (std::getline($1, $3)) {",
            "    std::cout << $3 << std::endl;",
            "  }",
            "  $1.close();",
            "} else {",
            "  std::cerr << \"Unable to open file\" << std::endl;",
            "}"
        ],
        "description": "Read file line-by-line"
    },
    "file append": {
        "prefix": "fileappend",
        "body": [
            "std::ofstream ${1:ofs}(${2:\"file.txt\"}, std::ios::app);",
            "if ($1.is_open()) {",
            "  $1 << ${3:\"Appended line\"} << std::endl;",
            "  $1.close();",
            "} else {",
            "  std::cerr << \"Unable to open file for appending\" << std::endl;",
            "}"
        ],
        "description": "Append to file"
    }
}
